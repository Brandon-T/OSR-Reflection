
function TReflectPlayer.GetName: string;
begin
  Result := Reflect.Smart.GetFieldString(Self.Reference, Player_Name);
end;

function TReflectPlayer.GetIndex: Integer;
begin
  Result := Self._Index + 32768;
end;

function TReflectPlayer.GetMSPoint: TPoint;
begin
  Result := Reflect.Tiles.TileToMs(Self.GetTile);
end;

procedure TReflectPlayerArray.GetAll;
var
  I, Iteration: Integer;
  Player: TReflectPointer;
begin
  if not Reflect.Mem.IsNull(ckPlayers) then
    Reflect.Mem.FreeObjects(ckPlayers, True);
  for I := 0 to 2047 do
  begin
    Player.GetFieldArrayObject(0, Client_LocalPlayers, I);
    if Player.Reference > 0 then
    begin
      SetLength(Self, Iteration + 1);
      with Self[Iteration] do
      begin
        _Index := I;
        HookCache[ckPlayers][Iteration] := Player.Reference;
        Reference := HookCache[ckPlayers][Iteration];
        Inc(Iteration);
      end;
    end;
  end;
end;

procedure TReflectPlayerArray.Get(Name: string);
var
  Temp, Temp1: TReflectPlayerArray;
  I, H, T: integer;
begin
  Temp.GetAll;
  if Length(Temp) = 0 then
    Exit;
  H := High(Temp);
  SetLength(Temp1, H + 1);
  for I := 0 to H do
  begin
    if (Temp[I].GetName = Name) then
    begin
      Temp1[T] := Temp[I];
      Inc(T);
    end;
  end;
  Setlength(Temp1, T);
  Self := Temp1;
end;

function TReflectPlayer.Find(Name: string): Boolean;
var
  Temp: TReflectPlayerArray;
begin
  Temp.Get(Name);
  if Length(Temp) = 0 then
    Exit;
  Result := True;
  Self := Temp[0];
end;

function TReflectPlayer.IsOnMS: Boolean;
begin
  Result := PointInBox(Self.GetMSPoint, [MSX1, MSY1, MSX2, MSY2]);
end;

function TReflectPlayer.GetCombatLevel: integer;
begin
  Result := Reflect.Smart.GetFieldInt(Self.Reference, Player_CombatLevel);
end;

