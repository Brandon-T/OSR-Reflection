
function TReflectionGametab.Current: Integer;
var
  TempWidget: TReflectWidget;
  Containers, Gametabs: TIntegerArray;
  I: Integer;
begin
  Containers := [Widget_ClanChat_Container, Widget_FriendsList_Container,
    Widget_IgnoreList_Container, Widget_Logout_Container,
    Widget_Options_Container, Widget_Emotes_Container,
    Widget_MusicPlayer_Container, Widget_CombatOptions_Container,
    Widget_Stats_Container, Widget_WornEquipment_Container,
    Widget_Prayer_Container, Widget_Magic_Container, Widget_QuestList_Container,
    Widget_ChangeWorld_Container
  ];
  Gametabs := [Gametab_ClanChat, Gametab_FriendsList, Gametab_IgnoreList,
    Gametab_Logout, Gametab_Options, Gametab_Emotes, Gametab_MusicPlayer,
    Gametab_CombatOptions, Gametab_Stats, Gametab_WornEquipment, Gametab_Prayer,
    Gametab_Magic, Gametab_QuestList, Gametab_Logout
  ];
  for I := 0 to High(Gametabs) do
  begin
    TempWidget.GetWidget(Containers[I], 0);
    if not (TempWidget.IsHidden) and (TempWidget.GetBounds.X1 <> -1) then
    begin
      TempWidget.Free;
      Exit(Gametabs[I]);
    end;
    TempWidget.Free;
  end;
  Result := GameTab_Inventory;
end;

function TReflectionGametab.Open(TabNum: Integer): Boolean;
var
  TabWidget: TReflectWidget;
  Tries: Integer;
  T: TReflectTimer;
begin
  if Reflect.Gametab.Current = TabNum then
    Exit(True);
  TabWidget.GetWidget(Widget_Gametab_Container, TabNum);
  if Not TabWidget.IsHidden then
  begin
    Tries := 0;
    while (Tries < 3) and (not Result) do
    begin
      TabWidget.Interact(3);
      T.Start;
      while (T.elapsedTime < 2000) and (not Result) do
      begin
        Result := (Reflect.Gametab.Current = TabNum);
        Wait(100 + Random(100));
      end;
      Inc(Tries);
    end;
    if (Result) then
      Wait(250 + Random(300));
  end;
  TabWidget.Free;
end;
