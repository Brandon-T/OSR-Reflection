
function TReflectionBank.IsOpen: Boolean; forward;
function TReflectionBank.ItemCount: Integer; forward;

function TReflectBankItem.GetName: string;
var
  Line: string;
  Id: Integer;
begin
  Id := Self._Id;
  if not InRange(Id, 0, Definition_Items_Length) then
    Exit;
  Line := ItemCache.GetStrings(Id);
  Result := Between('''name'': ''', ''',', Line);
end;

function TReflectBankItem.GetInvActions: TStringArray;
var
  Line, Temp: string;
  Id: Integer;
begin
  Id := Self._Id;
  if not InRange(Id, 0, Definition_Items_Length) then
    Exit;
  Line := ItemCache.GetStrings(Id);
  Temp := Between('''actions'': [''', ']', Line);
  Temp := Copy(Temp, 1, Length(Temp) - 1);
  Result := Explode(''',''',Temp);
end;

function TReflectBankItem.GetGroundActions: TStringArray;
var
  Line, Temp: string;
  Id: Integer;
begin
  Id := Self._Id;
  if not InRange(Id, 0, Definition_Items_Length) then
    Exit;
  Line := ItemCache.GetStrings(Id);
  Temp := Between('''groundActions'': [''', ']', Line);
  Temp := Copy(Temp, 1, Length(Temp) - 1);
  Result := Explode(''',''',Temp);
end;

function TReflectBankItem.GetHighAlchValue: Integer;
var
  Line: string;
  Id: Integer;
begin
  Id := Self._Id;
  if not InRange(Id, 0, Definition_Items_Length) then
    Exit;
  Line := ItemCache.GetStrings(Id);
  Result := StrToInt(Between('highAlchValue'': ', '}', Line));
end;

function TReflectBankItem.GetQuantity: Integer;
begin
  Result := Reflect.Smart.GetFieldArrayInt(Self.Reference,
    Widget_StackSizes, Self._Slot - 1);
end;

function TReflectBankItem.GetId: Integer;
begin
  Result := Self._Id;
end;

function TReflectBankItem.GetSlot: Integer;
begin
  Result := Self._Slot;
end;

procedure TReflectBankItemArray.GetAll;
var
  TheChild, TheGrandChild: TReflectPointer;
  ItemCount, I, Count: Integer;
  Temp: TReflectBankItemArray;
  BankWidget, BankChild: TReflectWidget;
begin
  Reflect.Mem.FreeObjects(ckBankItems, False);
  if not Reflect.Bank.IsOpen then
    Exit;
  ItemCount := Reflect.Bank.ItemCount;
  SetLength(Temp, ItemCount);
  BankWidget.GetWidget(Widget_Bank_Container, Widget_Bank_ItemSlots_Child);
  for I := 0 to ItemCount - 1 do
  begin
    BankChild.GetChild(BankWidget, I);
    Temp[I]._Id := BankChild.GetItemId;
    HookCache[ckBankItems][I] := BankChild.Reference;
    Temp[I].Reference := BankChild.Reference;
  end;
  Self := Temp;
  BankWidget.Free;
end;

procedure TReflectBankItemArray.Get(Name: string);
var
  Temp, Temp1: TReflectBankItemArray;
  I, H, T: integer;
begin
  Temp.GetAll;
  if Length(Temp) = 0 then
    Exit;
  H := High(Temp);
  SetLength(Temp1, H + 1);
  for I := 0 to H do
  begin
    if (Temp[I].GetName = Name) then
    begin
      Temp1[T] := Temp[I];
      Inc(T);
    end;
  end;
  Setlength(Temp1, T);
  Self := Temp1;
end;

procedure TReflectBankItemArray.Get(Id: Integer); overload;
var
  Temp, Temp1: TReflectBankItemArray;
  I, H, T: Integer;
begin
  Temp.GetAll;
  if Length(Temp) = 0 then
    Exit;
  H := High(Temp);
  SetLength(Temp1, H + 1);
  for I := 0 to H do
  begin
    if (Temp[I].GetId = Id) then
    begin
      Temp1[T] := Temp[I];
      Inc(T);
    end;
  end;
  Setlength(Temp1, T);
  Self := Temp1;
end;

function TReflectBankItem.Find(Name: string): Boolean;
var
  Temp: TReflectBankItemArray;
begin
  Temp.Get(Name);
  if Length(Temp) = 0 then
    Exit;
  Result := True;
  Self := Temp[0];
end;

function TReflectBankItem.Find(Id: Integer): Boolean; overload;
var
  Temp: TReflectBankItemArray;
begin
  Temp.Get(Id);
  if Length(Temp) = 0 then
    Exit;
  Result := True;
  Self := Temp[0];
end;

function TReflectionInternals.WithdrawBankItem(
  BankChild: TReflectWidget; Amount: Integer): Boolean;
var
  TimeOut: TReflectTimer;
  AmountWidget: TReflectWidget;
  Box: TBox;
begin
  Box := BankChild.GetBounds;
  Box := [Box.X1 + 10, Box.Y1 + 10, Box.X2 - 10, Box.Y2 - 10];
  if Amount = 1 then
  begin
    Reflect.Mouse.Move(Box, Mouse_Left);
    BankChild.Free;
    Exit(True);
  end;
  Reflect.Mouse.Move(Box, Mouse_Right);
  if Amount = -1 then
  begin
    Result := Reflect.Text.ChooseOption('All ', 200 + Random(100));
    BankChild.Free;
    Exit;
  end;
  if Reflect.Text.OptionExists(IntToStr(Amount) + ' ') then
    Result := Reflect.Text.ChooseOption(IntToStr(Amount) + ' ')
  else
  begin
    TimeOut.Start;
    BankChild.Interact('X');
    while (not AmountWidget.IsValid(162, 32)) do
    begin
      Wait(100 + Random(100));
      if TimeOut.ElapsedTime > 5000 then
      begin
        AmountWidget.Free;
        BankChild.Free;
        Exit(False);
      end;
    end;
    Wait(RandomRange(500, 750));
    Reflect.KeyBoard.TypeSend(ToStr(Amount));
    Result := True;
  end;
  BankChild.Free;
end;

function TReflectionInternals.GetBankItem(
  Item: TReflectBankItem): TReflectWidget;
var
  TheChild, TheGrandChild: TReflectPointer;
  ItemCount, I: Integer;
  BankWidget, BankChild: TReflectWidget;
  Temp: TReflectBankItem;
begin
  ItemCount := Reflect.Bank.ItemCount;
  BankWidget.GetWidget(WIDGET_Bank_Container, WIDGET_Bank_ItemSlots_Child);
  for I := 0 to ItemCount - 1 do
  begin
    BankChild.GetChild(BankWidget, I);
    Temp._Id := BankChild.GetItemId;
    if Temp._Id = Item._Id then
    begin
      BankWidget.Free;
      Exit(BankChild);
    end;
  end;
end;

function TReflectBankItem.Withdraw(Amount: Integer): Boolean;
var
  ItemCount, I, L: Integer;
  Temp: TReflectBankItem;
  BankChild, AmountWidget, SearchWidget: TReflectWidget;
  TimeOut: TReflectTimer;
  Center: TPoint;
  ShowingItems: String;
begin
  if (not Reflect.Bank.IsOpen) or (Self._Id = 0) then
    Exit(False);
  BankChild := Reflect.Internals.GetBankItem(Self);
  Center := MiddleBox(BankChild.GetBounds);
  if (not BankChild.IsHidden)and(PointInBox(Center,[22, 80, 480, 292])) then
    Result := Reflect.Internals.WithDrawBankItem(BankChild, Amount)
  else
  begin
    ShowingItems := Reflect.Widget.GetText(12, 4);
    if Not (Pos('Showing items', ShowingItems) > 0)then
    begin
      SearchWidget.GetWidget(12, 25);
      SearchWidget.Interact(5);
      SearchWidget.Free;
    end else
    begin
      ShowingItems := Between('<col=ff0000>', '</col>', ShowingItems);
      if (Length(ShowingItems) > 1)then
      while (Length(ShowingItems) > 1) do
      begin
        Reflect.Keyboard.TypeKey(Vk_Back);
        Wait(Random(30, 120));
        ShowingItems := Between('<col=ff0000>',
                                '</col>', Reflect.Widget.GetText(12, 4));
      end;
    end;
    TimeOut.Start;
    repeat
      Wait(RandomRange(200, 500));
    until(TimeOut.ElapsedTime > 4000)or
         (Pos('Showing items', Reflect.Widget.GetText(12, 4)) > 0);
    L = 1;
    while ((BankChild.IsHidden) or
      (not PointInBox(Center,[22, 80, 480, 292]))) do
    begin
      BankChild.Free;
      Reflect.KeyBoard.TypeSend(Self.GetName, False);
      Wait(RandomRange(500, 700));
      BankChild := Reflect.Internals.GetBankItem(Self);
      Center := MiddleBox(BankChild.GetBounds);
      Inc(L);
    end;
    Result := Reflect.Internals.WithDrawBankItem(BankChild, Amount);
    If Result then
      Wait(100+Random(150));
  end;
end;

function TReflectionBank.IsOpen: Boolean;
var
  W: TReflectWidget;
begin
  W.GetWidget(Widget_Bank_Container, 24);
  Result := (W.GetBounds.X2 > MSX1);
end;

function TReflectionBank.ItemCount: Integer;
var
  BankWidget: TReflectWidget;
begin
  if not Reflect.Bank.IsOpen then
    Exit;
  BankWidget.GetWidget(Widget_Bank_Container, Widget_Bank_TotalItems_Child);
  Result := StrToInt(BankWidget.GetText);
  BankWidget.Free;
end;

function TReflectionBank.Close: Boolean;
var
  BankWidget, BankChild: TReflectWidget;
  Tries: Integer;
  T: TReflectTimer;
begin
  if not Reflect.Bank.IsOpen then
    Exit(True);
  BankWidget.GetWidget(Widget_Bank_Container, 3);
  BankChild.GetChild(BankWidget, 11);
  while (Reflect.Bank.IsOpen) and (not Result) and (Tries < 4) do
  begin
    If BankChild.Interact('Close', 2)then
    begin
      T.Start;
      while (T.ElapsedTime < 2000) and (Reflect.Bank.IsOpen)do
        Wait(RandomRange(50, 100));
      Result := (not Reflect.Bank.IsOpen);
    end;
    Inc(Tries);
    Wait(RandomRange(100, 200));
  end;
  BankChild.Free;
  BankWidget.Free;
end;

function TReflectionBank.Withdraw(Name: string; Amount: Integer): Boolean;
var
  Temp: TReflectBankItem;
begin
  Temp.Find(Name);
  Result := Temp.Withdraw(Amount);
end;

function TReflectionBank.Withdraw(
  Id: Integer; Amount: Integer): Boolean overload;
var
  Temp: TReflectBankItem;
begin
  Temp.Find(Id);
  Result := Temp.Withdraw(Amount);
end;

function TReflectionBank.Deposit(Items: TStringArray;
                                 Amount: TIntegerArray): Boolean;
var
  Inv: TReflectInvItem;
  I: Integer;
  TimeOut: TReflectTimer;
  AmountWidget: TReflectWidget;
begin
  if not Reflect.Bank.IsOpen then
    Exit(False);
  for I:=0 to High(Items) do
    if Inv.Find(Items[I]) then
    begin
      if Result then
        Wait(RandomRange(100, 200));
      if Amount[I] = 1 then
      begin
        Reflect.Mouse.Move(Inv.GetBox, Mouse_Left);
        Result := True;
        Continue;
      end;
      Reflect.Mouse.Move(Inv.GetBox, Mouse_Right);
      if Amount[I] = -1 then
      begin
        Result := Reflect.Text.ChooseOption('All ', 200 + Random(100));
        Continue;
      end;
      if Reflect.Text.OptionExists(IntToStr(Amount[I]) + ' ') then
        Result := Reflect.Text.ChooseOption(IntToStr(Amount[I]) + ' ')
      else
      begin
        TimeOut.Start;
        Reflect.Text.ChooseOption('X');
        while (not AmountWidget.IsValid(162, 32)) do
        begin
          Wait(100 + Random(100));
          if TimeOut.ElapsedTime > 5000 then
          begin
            AmountWidget.Free;
            Continue;
          end;
        end;
        Wait(RandomRange(500, 750));
        Reflect.KeyBoard.TypeSend(ToStr(Amount[I]));
        Result := True;
      end;
    end;
end;

function TReflectionBank.Deposit(Items: TIntegerArray;
                                 Amount: TIntegerArray): Boolean; Overload;
var
  Inv: TReflectInvItem;
  I: Integer;
  TimeOut: TReflectTimer;
  AmountWidget: TReflectWidget;
begin
  if not Reflect.Bank.IsOpen then
    Exit(False);
  for I:=0 to High(Items) do
    if Inv.Find(Items[I]) then
    begin
      if Result then
        Wait(RandomRange(100, 200));
      if Amount[I] = 1 then
      begin
        Reflect.Mouse.Move(Inv.GetBox, Mouse_Left);
        Result := True;
        Continue;
      end;
      Reflect.Mouse.Move(Inv.GetBox, Mouse_Right);
      if Amount[I] = -1 then
      begin
        Result := Reflect.Text.ChooseOption('All ', 200 + Random(100));
        Continue;
      end;
      if Reflect.Text.OptionExists(IntToStr(Amount[I]) + ' ') then
        Result := Reflect.Text.ChooseOption(IntToStr(Amount[I]) + ' ')
      else
      begin
        TimeOut.Start;
        Reflect.Text.ChooseOption('X');
        while (not AmountWidget.IsValid(162, 32)) do
        begin
          Wait(100 + Random(100));
          if TimeOut.ElapsedTime > 5000 then
          begin
            AmountWidget.Free;
            Continue;
          end;
        end;
        Wait(RandomRange(500, 750));
        Reflect.KeyBoard.TypeSend(ToStr(Amount[I]));
        Result := True;
      end;
    end;
end;

function TReflectionBank.IsPinOpen: Boolean;
var
  PinWidget: TReflectWidget;
begin
  Result := PinWidget.IsValid(213, 3);
end;

function TReflectionBank.EnterPin(ThePin: string): Boolean
var
  PinWidget: TReflectWidget;
  NumberChild:  TReflectWidget;
  NumberBoxChild: TReflectWidget;
  PinNum, BoxNum, EnterNumber, Count, X, Y: Integer;
  Entered: Boolean;
const
  NumberChildIndexs: TIntegerArray = [16, 18, 20, 22, 24, 26, 28, 30, 32, 34];
begin
  if Reflect.Bank.IsOpen then
    Exit(True);
  if not Reflect.Bank.IsPinOpen then
    Exit(False);
  for PinNum := 1 to 4 do
  begin
    for BoxNum := 0 to 9 do
    begin
      Entered := False;
      PinWidget.GetWidget(Widget_PinScreen_Container, NumberChildIndexs[BoxNum]);
      NumberChild.GetChild(PinWidget, 1);
      if ThePin[PinNum] = NumberChild.GetText then
      begin
        NumberBoxChild.GetChild(PinWidget, 0);
        NumberBoxChild.Interact;
        Wait(RandomRange(250, 350));
        NumberBoxChild.Free;
        BoxNum := 9;
        Entered := True;
      end;
      PinWidget.Free;
      NumberChild.Free;
      if (not Entered) and (BoxNum = 9) then
      begin
        GetMousePos(X, Y);
        Reflect.Mouse.Move(Point(RandomRange((X + 60), (X + 120)),
          RandomRange((Y + 60), (Y + 120))), 2, 2);
        PinNum := PinNum - 1;
      end;
    end;
  end;
  Result := Reflect.Bank.IsOpen;
end;
